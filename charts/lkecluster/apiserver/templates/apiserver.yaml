apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kube-system-{{ .Release.Namespace }}
  name: kube-apiserver
  labels:
    app: kube-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      run: kube-apiserver
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      creationTimestamp: null
      labels:
        run: kube-apiserver
        component: kube-apiserver
        tier: control-plane
      name: kube-apiserver
      namespace: kube-system-{{ .Release.Namespace }}
    spec:
      containers:
      - command:
        - kube-apiserver
        - --authorization-mode=Node,RBAC
        - --advertise-address=0.0.0.0
        - --allow-privileged=true
        - --client-ca-file=/etc/{{ .Values.ClusterName }}/pki/ca.crt
        - --disable-admission-plugins=PersistentVolumeLabel
        - --enable-admission-plugins=NodeRestriction
        - --enable-bootstrap-token-auth=true
        - --etcd-cafile=/etc/{{ .Values.ClusterName }}/pki/etcd/ca.crt
        - --etcd-certfile=/etc/{{ .Values.ClusterName }}/pki/apiserver-etcd-client.crt
        - --etcd-keyfile=/etc/{{ .Values.ClusterName }}/pki/apiserver-etcd-client.key
        - --etcd-servers=https://etcd:2379
        - --insecure-port=0
        # modified
        - --kubelet-client-certificate=/etc/{{ .Values.ClusterName }}/pki/apiserver-kubelet-client.crt
        # modified
        - --kubelet-client-key=/etc/{{ .Values.ClusterName }}/pki/apiserver-kubelet-client.key
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        # modified
        - --proxy-client-cert-file=/etc/{{ .Values.ClusterName }}/pki/front-proxy-client.crt
        # modified
        - --proxy-client-key-file=/etc/{{ .Values.ClusterName }}/pki/front-proxy-client.key
        - --requestheader-allowed-names=front-proxy-client
        # modified
        - --requestheader-client-ca-file=/etc/{{ .Values.ClusterName }}/pki/front-proxy-ca.crt
        - --requestheader-extra-headers-prefix=X-Remote-Extra-
        - --requestheader-group-headers=X-Remote-Group
        - --requestheader-username-headers=X-Remote-User
        # modified
        - --secure-port=6443
        # modified
        - --service-account-key-file=/etc/{{ .Values.ClusterName }}/pki/sa.pub
        - --service-cluster-ip-range=10.128.0.0/16
        # modified
        - --tls-cert-file=/etc/{{ .Values.ClusterName }}/pki/apiserver.crt
        # modified
        - --tls-private-key-file=/etc/{{ .Values.ClusterName }}/pki/apiserver.key
        - --token-auth-file=/etc/wg-node-watcher-token
        image: {{ index .Values "images" "kube-apiserver" }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            host: localhost
            path: /healthz
            port: 6443
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 15
        name: kube-apiserver
        resources:
          requests:
            # note that this means 1/8th of a CPU core
            cpu: 50m
        volumeMounts:
        - mountPath: /etc/ca-certificates
          name: etc-ca-certificates
          readOnly: true
        # modified
        - mountPath: /etc/{{ .Values.ClusterName }}/pki
          name: k8s-certs
          readOnly: true
        - mountPath: /etc/{{ .Values.ClusterName }}/pki/etcd
          name: etcd-certs
          readOnly: true
        - mountPath: /etc/ssl/certs
          name: ca-certs
          readOnly: true
        - mountPath: /usr/share/ca-certificates
          name: usr-share-ca-certificates
          readOnly: true
        - mountPath: /usr/local/share/ca-certificates
          name: usr-local-share-ca-certificates
          readOnly: true
        - mountPath: /etc/wg-node-watcher-token
          subPath: wg-node-watcher-token
          name: wg-node-watcher-token
          readOnly: true
      hostNetwork: false
      dnsPolicy: ClusterFirst
      # modified
      # priorityClassName: system-cluster-critical
      volumes:
      - name: k8s-certs
        secret:
          secretName: k8s-certs
      - name: etcd-certs
        secret:
          secretName: etcd-certs
      - hostPath:
          path: /etc/ssl/certs
          type: DirectoryOrCreate
        name: ca-certs
      - hostPath:
          path: /usr/share/ca-certificates
          type: DirectoryOrCreate
        name: usr-share-ca-certificates
      - hostPath:
          path: /usr/local/share/ca-certificates
          type: DirectoryOrCreate
        name: usr-local-share-ca-certificates
      - hostPath:
          path: /etc/ca-certificates
          type: DirectoryOrCreate
        name: etc-ca-certificates
      - name: wg-node-watcher-token
        secret:
          secretName: wg-node-watcher-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  name: wg-node-controller-role
  namespace: kube-system-{{ .Release.Namespace }}
rules:
- apiGroups:
  - lkecluster.linode.com
  resources:
  - linodeclusterconfigs
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  name: wg-node-controller-rolebinding
  namespace: kube-system-{{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: wg-node-controller-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: kube-system-{{ .Release.Namespace }}
